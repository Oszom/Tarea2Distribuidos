// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: datanode.proto

package datanode

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UploadStatusCode int32

const (
	UploadStatusCode_Desconocido UploadStatusCode = 0
	UploadStatusCode_Ok          UploadStatusCode = 1
	UploadStatusCode_Fallido     UploadStatusCode = 2
)

// Enum value maps for UploadStatusCode.
var (
	UploadStatusCode_name = map[int32]string{
		0: "Desconocido",
		1: "Ok",
		2: "Fallido",
	}
	UploadStatusCode_value = map[string]int32{
		"Desconocido": 0,
		"Ok":          1,
		"Fallido":     2,
	}
)

func (x UploadStatusCode) Enum() *UploadStatusCode {
	p := new(UploadStatusCode)
	*p = x
	return p
}

func (x UploadStatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UploadStatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_datanode_proto_enumTypes[0].Descriptor()
}

func (UploadStatusCode) Type() protoreflect.EnumType {
	return &file_datanode_proto_enumTypes[0]
}

func (x UploadStatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UploadStatusCode.Descriptor instead.
func (UploadStatusCode) EnumDescriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{0}
}

type Chunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content        []byte `protobuf:"bytes,1,opt,name=Content,proto3" json:"Content,omitempty"`
	NombreChunk    string `protobuf:"bytes,2,opt,name=NombreChunk,proto3" json:"NombreChunk,omitempty"`
	NombreOriginal string `protobuf:"bytes,3,opt,name=NombreOriginal,proto3" json:"NombreOriginal,omitempty"`
	Parte          int32  `protobuf:"varint,4,opt,name=Parte,proto3" json:"Parte,omitempty"`
}

func (x *Chunk) Reset() {
	*x = Chunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chunk) ProtoMessage() {}

func (x *Chunk) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chunk.ProtoReflect.Descriptor instead.
func (*Chunk) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{0}
}

func (x *Chunk) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *Chunk) GetNombreChunk() string {
	if x != nil {
		return x.NombreChunk
	}
	return ""
}

func (x *Chunk) GetNombreOriginal() string {
	if x != nil {
		return x.NombreOriginal
	}
	return ""
}

func (x *Chunk) GetParte() int32 {
	if x != nil {
		return x.Parte
	}
	return 0
}

type UploadStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string           `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	Code    UploadStatusCode `protobuf:"varint,2,opt,name=Code,proto3,enum=datanode.UploadStatusCode" json:"Code,omitempty"`
}

func (x *UploadStatus) Reset() {
	*x = UploadStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadStatus) ProtoMessage() {}

func (x *UploadStatus) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadStatus.ProtoReflect.Descriptor instead.
func (*UploadStatus) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{1}
}

func (x *UploadStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UploadStatus) GetCode() UploadStatusCode {
	if x != nil {
		return x.Code
	}
	return UploadStatusCode_Desconocido
}

type CantidadChunks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chunks int32 `protobuf:"varint,1,opt,name=Chunks,proto3" json:"Chunks,omitempty"`
}

func (x *CantidadChunks) Reset() {
	*x = CantidadChunks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CantidadChunks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CantidadChunks) ProtoMessage() {}

func (x *CantidadChunks) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CantidadChunks.ProtoReflect.Descriptor instead.
func (*CantidadChunks) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{2}
}

func (x *CantidadChunks) GetChunks() int32 {
	if x != nil {
		return x.Chunks
	}
	return 0
}

type IsAlive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Capacidad   int32 `protobuf:"varint,2,opt,name=capacidad,proto3" json:"capacidad,omitempty"`
	FalloRandom bool  `protobuf:"varint,3,opt,name=falloRandom,proto3" json:"falloRandom,omitempty"`
}

func (x *IsAlive) Reset() {
	*x = IsAlive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsAlive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsAlive) ProtoMessage() {}

func (x *IsAlive) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsAlive.ProtoReflect.Descriptor instead.
func (*IsAlive) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{3}
}

func (x *IsAlive) GetCapacidad() int32 {
	if x != nil {
		return x.Capacidad
	}
	return 0
}

func (x *IsAlive) GetFalloRandom() bool {
	if x != nil {
		return x.FalloRandom
	}
	return false
}

type Propuesta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumChunk    int32  `protobuf:"varint,1,opt,name=NumChunk,proto3" json:"NumChunk,omitempty"`
	Maquina     string `protobuf:"bytes,2,opt,name=Maquina,proto3" json:"Maquina,omitempty"`
	NombreLibro string `protobuf:"bytes,3,opt,name=NombreLibro,proto3" json:"NombreLibro,omitempty"`
}

func (x *Propuesta) Reset() {
	*x = Propuesta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Propuesta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Propuesta) ProtoMessage() {}

func (x *Propuesta) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Propuesta.ProtoReflect.Descriptor instead.
func (*Propuesta) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{4}
}

func (x *Propuesta) GetNumChunk() int32 {
	if x != nil {
		return x.NumChunk
	}
	return 0
}

func (x *Propuesta) GetMaquina() string {
	if x != nil {
		return x.Maquina
	}
	return ""
}

func (x *Propuesta) GetNombreLibro() string {
	if x != nil {
		return x.NombreLibro
	}
	return ""
}

type EmptyMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyMessage) Reset() {
	*x = EmptyMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datanode_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyMessage) ProtoMessage() {}

func (x *EmptyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_datanode_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyMessage.ProtoReflect.Descriptor instead.
func (*EmptyMessage) Descriptor() ([]byte, []int) {
	return file_datanode_proto_rawDescGZIP(), []int{5}
}

var File_datanode_proto protoreflect.FileDescriptor

var file_datanode_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x05, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x4e, 0x6f, 0x6d, 0x62, 0x72, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x4e, 0x6f, 0x6d, 0x62, 0x72, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x12, 0x26, 0x0a, 0x0e, 0x4e, 0x6f, 0x6d, 0x62, 0x72, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4e, 0x6f, 0x6d, 0x62, 0x72, 0x65,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x50, 0x61, 0x72, 0x74, 0x65, 0x22, 0x58,
	0x0a, 0x0c, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x28, 0x0a, 0x0e, 0x43, 0x61, 0x6e, 0x74,
	0x69, 0x64, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x73, 0x22, 0x49, 0x0a, 0x07, 0x69, 0x73, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x64, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x64, 0x61, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x66,
	0x61, 0x6c, 0x6c, 0x6f, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x66, 0x61, 0x6c, 0x6c, 0x6f, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x22, 0x63, 0x0a,
	0x09, 0x50, 0x72, 0x6f, 0x70, 0x75, 0x65, 0x73, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x75,
	0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4e, 0x75,
	0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x61, 0x71, 0x75, 0x69, 0x6e,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x61, 0x71, 0x75, 0x69, 0x6e, 0x61,
	0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x6f, 0x6d, 0x62, 0x72, 0x65, 0x4c, 0x69, 0x62, 0x72, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4e, 0x6f, 0x6d, 0x62, 0x72, 0x65, 0x4c, 0x69, 0x62,
	0x72, 0x6f, 0x22, 0x0e, 0x0a, 0x0c, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2a, 0x38, 0x0a, 0x10, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x6f, 0x6e,
	0x6f, 0x63, 0x69, 0x64, 0x6f, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x6b, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x46, 0x61, 0x6c, 0x6c, 0x69, 0x64, 0x6f, 0x10, 0x02, 0x32, 0xa0, 0x02, 0x0a,
	0x0f, 0x44, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x3d, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x69, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x6f,
	0x12, 0x0f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x1a, 0x16, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12,
	0x47, 0x0a, 0x12, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x72, 0x50, 0x72, 0x6f, 0x70,
	0x75, 0x65, 0x73, 0x74, 0x61, 0x12, 0x18, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x43, 0x61, 0x6e, 0x74, 0x69, 0x64, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x1a,
	0x11, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x73, 0x41, 0x6c, 0x69,
	0x76, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x49, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x6f, 0x44, 0x61, 0x74, 0x61,
	0x6e, 0x6f, 0x64, 0x65, 0x12, 0x0f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x1a, 0x16, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x28,
	0x01, 0x30, 0x01, 0x12, 0x3a, 0x0a, 0x0c, 0x4f, 0x62, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x12, 0x13, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x75, 0x65, 0x73, 0x74, 0x61, 0x1a, 0x0f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42,
	0x13, 0x5a, 0x11, 0x44, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x6e, 0x6f, 0x64, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_datanode_proto_rawDescOnce sync.Once
	file_datanode_proto_rawDescData = file_datanode_proto_rawDesc
)

func file_datanode_proto_rawDescGZIP() []byte {
	file_datanode_proto_rawDescOnce.Do(func() {
		file_datanode_proto_rawDescData = protoimpl.X.CompressGZIP(file_datanode_proto_rawDescData)
	})
	return file_datanode_proto_rawDescData
}

var file_datanode_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_datanode_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_datanode_proto_goTypes = []interface{}{
	(UploadStatusCode)(0),  // 0: datanode.UploadStatusCode
	(*Chunk)(nil),          // 1: datanode.Chunk
	(*UploadStatus)(nil),   // 2: datanode.UploadStatus
	(*CantidadChunks)(nil), // 3: datanode.CantidadChunks
	(*IsAlive)(nil),        // 4: datanode.isAlive
	(*Propuesta)(nil),      // 5: datanode.Propuesta
	(*EmptyMessage)(nil),   // 6: datanode.EmptyMessage
}
var file_datanode_proto_depIdxs = []int32{
	0, // 0: datanode.UploadStatus.Code:type_name -> datanode.UploadStatusCode
	1, // 1: datanode.DatanodeService.SubirArchivo:input_type -> datanode.Chunk
	3, // 2: datanode.DatanodeService.VerificarPropuesta:input_type -> datanode.CantidadChunks
	1, // 3: datanode.DatanodeService.CompartirArchivoDatanode:input_type -> datanode.Chunk
	5, // 4: datanode.DatanodeService.ObtenerChunk:input_type -> datanode.Propuesta
	2, // 5: datanode.DatanodeService.SubirArchivo:output_type -> datanode.UploadStatus
	4, // 6: datanode.DatanodeService.VerificarPropuesta:output_type -> datanode.isAlive
	2, // 7: datanode.DatanodeService.CompartirArchivoDatanode:output_type -> datanode.UploadStatus
	1, // 8: datanode.DatanodeService.ObtenerChunk:output_type -> datanode.Chunk
	5, // [5:9] is the sub-list for method output_type
	1, // [1:5] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_datanode_proto_init() }
func file_datanode_proto_init() {
	if File_datanode_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_datanode_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CantidadChunks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsAlive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Propuesta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datanode_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_datanode_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_datanode_proto_goTypes,
		DependencyIndexes: file_datanode_proto_depIdxs,
		EnumInfos:         file_datanode_proto_enumTypes,
		MessageInfos:      file_datanode_proto_msgTypes,
	}.Build()
	File_datanode_proto = out.File
	file_datanode_proto_rawDesc = nil
	file_datanode_proto_goTypes = nil
	file_datanode_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DatanodeServiceClient is the client API for DatanodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DatanodeServiceClient interface {
	SubirArchivo(ctx context.Context, opts ...grpc.CallOption) (DatanodeService_SubirArchivoClient, error)
	VerificarPropuesta(ctx context.Context, opts ...grpc.CallOption) (DatanodeService_VerificarPropuestaClient, error)
	CompartirArchivoDatanode(ctx context.Context, opts ...grpc.CallOption) (DatanodeService_CompartirArchivoDatanodeClient, error)
	ObtenerChunk(ctx context.Context, opts ...grpc.CallOption) (DatanodeService_ObtenerChunkClient, error)
}

type datanodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDatanodeServiceClient(cc grpc.ClientConnInterface) DatanodeServiceClient {
	return &datanodeServiceClient{cc}
}

func (c *datanodeServiceClient) SubirArchivo(ctx context.Context, opts ...grpc.CallOption) (DatanodeService_SubirArchivoClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DatanodeService_serviceDesc.Streams[0], "/datanode.DatanodeService/SubirArchivo", opts...)
	if err != nil {
		return nil, err
	}
	x := &datanodeServiceSubirArchivoClient{stream}
	return x, nil
}

type DatanodeService_SubirArchivoClient interface {
	Send(*Chunk) error
	Recv() (*UploadStatus, error)
	grpc.ClientStream
}

type datanodeServiceSubirArchivoClient struct {
	grpc.ClientStream
}

func (x *datanodeServiceSubirArchivoClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *datanodeServiceSubirArchivoClient) Recv() (*UploadStatus, error) {
	m := new(UploadStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *datanodeServiceClient) VerificarPropuesta(ctx context.Context, opts ...grpc.CallOption) (DatanodeService_VerificarPropuestaClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DatanodeService_serviceDesc.Streams[1], "/datanode.DatanodeService/VerificarPropuesta", opts...)
	if err != nil {
		return nil, err
	}
	x := &datanodeServiceVerificarPropuestaClient{stream}
	return x, nil
}

type DatanodeService_VerificarPropuestaClient interface {
	Send(*CantidadChunks) error
	Recv() (*IsAlive, error)
	grpc.ClientStream
}

type datanodeServiceVerificarPropuestaClient struct {
	grpc.ClientStream
}

func (x *datanodeServiceVerificarPropuestaClient) Send(m *CantidadChunks) error {
	return x.ClientStream.SendMsg(m)
}

func (x *datanodeServiceVerificarPropuestaClient) Recv() (*IsAlive, error) {
	m := new(IsAlive)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *datanodeServiceClient) CompartirArchivoDatanode(ctx context.Context, opts ...grpc.CallOption) (DatanodeService_CompartirArchivoDatanodeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DatanodeService_serviceDesc.Streams[2], "/datanode.DatanodeService/CompartirArchivoDatanode", opts...)
	if err != nil {
		return nil, err
	}
	x := &datanodeServiceCompartirArchivoDatanodeClient{stream}
	return x, nil
}

type DatanodeService_CompartirArchivoDatanodeClient interface {
	Send(*Chunk) error
	Recv() (*UploadStatus, error)
	grpc.ClientStream
}

type datanodeServiceCompartirArchivoDatanodeClient struct {
	grpc.ClientStream
}

func (x *datanodeServiceCompartirArchivoDatanodeClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *datanodeServiceCompartirArchivoDatanodeClient) Recv() (*UploadStatus, error) {
	m := new(UploadStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *datanodeServiceClient) ObtenerChunk(ctx context.Context, opts ...grpc.CallOption) (DatanodeService_ObtenerChunkClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DatanodeService_serviceDesc.Streams[3], "/datanode.DatanodeService/ObtenerChunk", opts...)
	if err != nil {
		return nil, err
	}
	x := &datanodeServiceObtenerChunkClient{stream}
	return x, nil
}

type DatanodeService_ObtenerChunkClient interface {
	Send(*Propuesta) error
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type datanodeServiceObtenerChunkClient struct {
	grpc.ClientStream
}

func (x *datanodeServiceObtenerChunkClient) Send(m *Propuesta) error {
	return x.ClientStream.SendMsg(m)
}

func (x *datanodeServiceObtenerChunkClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DatanodeServiceServer is the server API for DatanodeService service.
type DatanodeServiceServer interface {
	SubirArchivo(DatanodeService_SubirArchivoServer) error
	VerificarPropuesta(DatanodeService_VerificarPropuestaServer) error
	CompartirArchivoDatanode(DatanodeService_CompartirArchivoDatanodeServer) error
	ObtenerChunk(DatanodeService_ObtenerChunkServer) error
}

// UnimplementedDatanodeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDatanodeServiceServer struct {
}

func (*UnimplementedDatanodeServiceServer) SubirArchivo(DatanodeService_SubirArchivoServer) error {
	return status.Errorf(codes.Unimplemented, "method SubirArchivo not implemented")
}
func (*UnimplementedDatanodeServiceServer) VerificarPropuesta(DatanodeService_VerificarPropuestaServer) error {
	return status.Errorf(codes.Unimplemented, "method VerificarPropuesta not implemented")
}
func (*UnimplementedDatanodeServiceServer) CompartirArchivoDatanode(DatanodeService_CompartirArchivoDatanodeServer) error {
	return status.Errorf(codes.Unimplemented, "method CompartirArchivoDatanode not implemented")
}
func (*UnimplementedDatanodeServiceServer) ObtenerChunk(DatanodeService_ObtenerChunkServer) error {
	return status.Errorf(codes.Unimplemented, "method ObtenerChunk not implemented")
}

func RegisterDatanodeServiceServer(s *grpc.Server, srv DatanodeServiceServer) {
	s.RegisterService(&_DatanodeService_serviceDesc, srv)
}

func _DatanodeService_SubirArchivo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DatanodeServiceServer).SubirArchivo(&datanodeServiceSubirArchivoServer{stream})
}

type DatanodeService_SubirArchivoServer interface {
	Send(*UploadStatus) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type datanodeServiceSubirArchivoServer struct {
	grpc.ServerStream
}

func (x *datanodeServiceSubirArchivoServer) Send(m *UploadStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *datanodeServiceSubirArchivoServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DatanodeService_VerificarPropuesta_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DatanodeServiceServer).VerificarPropuesta(&datanodeServiceVerificarPropuestaServer{stream})
}

type DatanodeService_VerificarPropuestaServer interface {
	Send(*IsAlive) error
	Recv() (*CantidadChunks, error)
	grpc.ServerStream
}

type datanodeServiceVerificarPropuestaServer struct {
	grpc.ServerStream
}

func (x *datanodeServiceVerificarPropuestaServer) Send(m *IsAlive) error {
	return x.ServerStream.SendMsg(m)
}

func (x *datanodeServiceVerificarPropuestaServer) Recv() (*CantidadChunks, error) {
	m := new(CantidadChunks)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DatanodeService_CompartirArchivoDatanode_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DatanodeServiceServer).CompartirArchivoDatanode(&datanodeServiceCompartirArchivoDatanodeServer{stream})
}

type DatanodeService_CompartirArchivoDatanodeServer interface {
	Send(*UploadStatus) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type datanodeServiceCompartirArchivoDatanodeServer struct {
	grpc.ServerStream
}

func (x *datanodeServiceCompartirArchivoDatanodeServer) Send(m *UploadStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *datanodeServiceCompartirArchivoDatanodeServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DatanodeService_ObtenerChunk_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DatanodeServiceServer).ObtenerChunk(&datanodeServiceObtenerChunkServer{stream})
}

type DatanodeService_ObtenerChunkServer interface {
	Send(*Chunk) error
	Recv() (*Propuesta, error)
	grpc.ServerStream
}

type datanodeServiceObtenerChunkServer struct {
	grpc.ServerStream
}

func (x *datanodeServiceObtenerChunkServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func (x *datanodeServiceObtenerChunkServer) Recv() (*Propuesta, error) {
	m := new(Propuesta)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _DatanodeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "datanode.DatanodeService",
	HandlerType: (*DatanodeServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubirArchivo",
			Handler:       _DatanodeService_SubirArchivo_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "VerificarPropuesta",
			Handler:       _DatanodeService_VerificarPropuesta_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "CompartirArchivoDatanode",
			Handler:       _DatanodeService_CompartirArchivoDatanode_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ObtenerChunk",
			Handler:       _DatanodeService_ObtenerChunk_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "datanode.proto",
}
